########################### Version 0 (avant premier TP)

28/9/2017 : Chaine de syntaxe complète (lexico/syntaxe/semantique/exec)

1/10/2017 : Environnement, variables locales/gloales. Les sommets et
arcs sont maintenant des variables d'un environnement "spécial"
(plus globales que les variales locales ; moins que les globales et 
prédéfinies. Mais surtout "protégées" : dans tout environnement, on ne peut
de toutes façons définir une variable de même nom qu'un sommet)

1/10/2017 : 
   * Appels de fonctions, return
   * If
   * ++
   * fonctions prédéfinies (print), et constantes prédéfinies

2/10/2017 :
   * break, continue
   * opérateurs binaires sur les booléens et nombres
   * Protection (très grossière) contre les boucles infinies

3/10/2017 :
   * Affectation
   * Création arcs et sommets
   * print sur types complexes (structures, sommets, etc)
   * l'affectation peut se faire vers toute l-value, cad non seulement les
     variables (x=...), mais aussi les éléments d'un tableau (t[i]=...), 
     les champs d'une structure (s.f=...), etc.
   * la protection des sommets (interdiction d'avoir des variables du même nom
     concerne tout usage de l-value, pas seulement l'affectation. Donc ++,
     +=, etc)

5/10/2017 :
   * for (en fait un foreach)

6/10/2017 :
   * optimisation spécifique pour for ... in range(...)
   * opérateurs de comparaison
   * random
   * les fonctions qui retournent des arêtes les réordonnent d'abord de façon 
     à faire apparaître en premier le sommet de référence, s'il y a un
     sommet de référence
   * ++ et -- sont des expressions et des instructions cad utilisable 
     autant comme ligne de code seule, x++, que au sein du calcul d'une valeur,
     comme x=f(n++)

8/10/2017 :
   * opérateurs binaires sur d'autres éléments que des nombres (eg, 
     chaine+nombre = concaténation de la chaine et de la représentation
     du nombre)
   * opérateurs booléens paresseux. A && B => B n'est pas évalué si A
     est faux de toutes façons

21/10/2017 :
   * Améliorations de l'interface : scroll dans la console, sauvegarde des
     données, MAJ automatique du graphe, ...
   * println
   * Interprétation en tâche de fond (worker) : un programme long n'empêche
     pas d'éditer le code 
   * Implémentation de toutes les solutions des labos de l'années. Première
     version de l'interprète, qui, en théorie, permet donc de faire 
     tous les TP... à condition de programmer comme moi

24/10/2017 :
   * Utilisation des sommets comme chaîne de caractère (selon le contexte)
   * Sauvegarde par Ctrl+S
   * Utilisation des chaînes (et donc sommets), cf point 1, comme tableau
     En gros il est possibles d'écrire str[1] pour avoir le 2e caractère
     et donc MonSommet[1] pour avoir le deuxième caractère du nom du sommet
     MonSommet
   * Accès aux champs des structures (hors sommets). Une structure se déclare
     implicitement, par le simple fait d'écrire nouvellevariable.champ=valeur

29/1/2018 : 
   * Fin implémentation et tests de toutes les solutions (après traduction)
     des étudiants de S5
   * Déploiement énib
   * Sauvegarde dans LocalStorage

################## Version 1 (débuggage et développement pendant l'utilisation
# par les étudiants de S6P)

11/2/2018 :
   * Correction de bugs
      - Certaines tabulations font planter l'interprète (problème pas encore
        100% réglé d'ailleurs)
      - Le else ne fonctionnait pas dans certains cas
   * Ajouts prévus
      - Matrice d'adjacence calculée en tâche de fond (la variable Adj
        contient toujours la matrice d'adjacence correspondant au graphe 
        actuel. De même Id, contient l'identité)
      - (A,B) au lieu de lever une erreur si l'arc (A,B) n'existe pas, 
         vaut null. (cela permet de tester facilement l'existence d'un arc)
   * Améliorations à la demande d'étudiants
      - elif
      - espaces, tabulations, retour charriots, ... visibles dans l'éditeur
      - il est possible d'accéder aux champs d'un arc désigné par une
        variable, et pas par une paire.
        Autrefois, la syntaxe, d'inspiration plus mathématique qu'informatique,
        imposait qu'une variable désignant un arc soit obligatoirement de 
        la forme (x,y), x et y désignant alors en même temps les sommets
        Cette syntaxe mathématique coexiste maintenant avec un usage plus
        classique en informatique. Donc on peut maintenant écrire
        for (x,y) in arcs(): (x,y).marque=0
        Comme 
        for a in arcs(): a.marque=0

13/2/2018 :
   * Ajouts
      - Le graphe est redimensionné pour tenir dans la zone de graphe (sinon
        il dépassait bêtement, du moins sur les navigateurs de l'enib)
      - Les fichiers sont toujours (temporairement) stockés dans le localStorage
        mais on peut en avoir plusieurs maintenant
      - Suppression de fichiers
      - Conversion automatique du stockage unique des vieilles versions
        en un fichier "Premier labo"

14/2/2018 :
   * Changements et ajouts
      - Copie de fichiers
      - Un type (interne, puisque le language n'est pas typé) matrice existe
        explicitement (autrefois une matrice n'était qu'un tableau de tableau).
        Cela permet de définir des opérations spécifiques pour les matrics
        (Un "+" sur un tableau est une concaténation. Alors qu'un "+" sur
        une matrice est l'addition de matrice).
        Et d'optimiser un peu de très lourd code sur les opérateurs linéaires
      - Addition, multiplication matricielle
      - Puissance matricielle
      - Opérateurs matriciels booléens .+ .* et .^
      - Accès aux coefficients d'une matrice par la syntaxe M[i,j] 
        (quand c'était des tableaux, M[i][j] fonctionnait sans que je n'ai
        rien eu à faire pour, si ce n'est implémenter les tableaux)

15/2/2018
   * Changements et ajouts
      - fonction prédéfinie len
      - comptage des opérations, et variable prédéfinie OpCount
   * Correction de bugs
      - not (!)
   * Améliorations à la demande d'étudiants
      - xor
      - retour de valeur multiple pour les fonctions. Il est donc possible
        d'écrire
        def f():
            return 12,"coucou",13
        Et ensuite d'appeler
        a,str,b = f()
        qui affectera à la fois a (à 12), str (à "coucou") et b (à 13)
        C'est pour l'instant réservé au seul retour de fonction. Il ne
        s'agit donc pas d'une implémentation complète d'un type "tuple"
        permettant d'écrire
        a,b,c=12,13,14
        Mais bon, en même temps, ce n'est que dans les fonctions que c'est
        vraiment pratique. Et je préfère ne pas compliquer le langage en
        faisant apparaître un nouveau type visible (c'est un nouveau type
        tuple, mais interne, invisible)

17/2/2018 :
   * Ajouts et modifications
      - On peut maintenant déplacer la séparation de l'écran à la souris
        (c'est surtout utile pour les profs, avec leur projecteur 
        800x600)
      - C'était pas une si bonne idée que ça de faire tenir tout le graphe
        dans la fenêtre (on ne voit rien quand on a 81 sommets sans arcs,
        ou au contraire un graphe complet).
        Mais en même temps le graphe qui dépasse c'est pas génial non plus.
        Maintenant on peut donc zoomer comme on préfère dans le graphe
        (alt+molette de la souris), et "scroller" s'il est plus grand que 
        la fenêtre (molette pour le scroll vertical. Shift+molette pour le
        scroll horizontal)
      - Un bouton pour sauvegarder une image du graphe (dans le coin en haut à 
        droite ; invisible sauf quand on y met la souris). C'est surtout
        pratique pour les profs, pour faire des cours et documents. Après
        tout, pour qui n'a pas peur de taper du code plutôt que de cliquer
        partout, ce langage est un éditeur de graphe rudimentaire mais efficace
      - Le "range(n)" avait été oublié (équivalent à range(0,n), lui même
        équivalent à range(0,n,1))
      - Le code n'est plus exécuté à chaque ligne, mais seulement sur ctrl+s
        ou sur alt+r pour exécuter sans sauvegarder
   * Améliorations à la demande d'étudiants
      - pass 
        même si ça ne fait pas ce que l'étudiant qui l'a demandé
        croit que ça fait. pass, en gros, ça ne fait juste rien. C'est 
        l'équivalant C, C++, Java de {;}.
        C'est juste pratique dans les séquences de if/elif/else pour dire
        "dans ce cas, rien"
        if a==1: print(1)
        elif a==2: print(2)
        elif a==3: pass
        else: print("ni 1, ni 2 ni 3")
        "pass" n'a donc rien à voir avec les boucles, et aucun rapport avec
        break et continue

18/2/2018:
   * Ajouts ou modifications
      - Quelques fonctions mathématiques usuelles (sin, cos, ...)
      - Les fichiers de l'interpréteur sont interdits de cache. De cette façon, vous
        n'aurez pas à recharger interpret.js et grlang.jison pour vous assurer d'avoir
        la dernière version.
        Sauf que pour avoir la version qui ne va pas dans le cache... il vous faut d'abord
        recharger (une dernière fois) interpret.js, grlang.jison, ...

19/2/2018:
   * Ajouts ou modifications
      - Vous pouvez maintenant ajouter un attribut "color" à un sommet, arc ou arête
        Dans ce cas, il sera représenté avec cette couleur, et en gras, dans le graphe
      - Extraction de sous-tableaux T[a:b]
   * Correction de bugs
      - Comparaison de matrices
      - Lignes vides commentées
      - Arrêt boucle infinie

27/2/2018:
   * Ajouts ou modifications
      - "import" pour charger des modules fournis par le prof
      - deux modes d'affichage des graphes : "canvas" pour les gros graphes
      - concaténation de tableaux
      - début d'un "JIT" pour l'accélération

13/3/2018
   * Ajouts à la demande d'étudiants
      - Infinity
   * Ajouts ou modificatin
      - Multi-graphe (on peut créer plusieurs graphes, visualisés dans autant d'onglets)
      - Tooltip sur l'affichage des graphes 
      - Zoom sur l'affichage des graphes

10/4/2018
   * Ajouts à la demande d'étudiants
      - refresh pour permettre une sorte d'animation

25/9/2018
   * Correction de bugs
      - x=Arete [A,B] ne fonctionnait pas

01/2/2023
    * Ajout nombre décimaux

07/4/2023
    * Affichage graphe en mode "réseau"

03/11/2023
    * Fonction Time pour récupérer le temps réel

10/11/2023
    * Refactoring complet. Avec quelques petits changements du langage
        - Plus de creation implicite de tableaux. Il faut écrire T=[], avant de pouvoir écrire T[1]=12
        - Plus de création implicite de structure. Il faut écrite S={} avant de pouvoir écrire S.toto=12
        - Le graphe par défaut s'appelle Gr, et non plus juste G
        - Le graphe Gr devient un graphe comme les autres. Qui se trouve être celui sur lequel on agit, sauf indication contraire
        - Il est impossible de donner à des sommets ou variables le nom d'un graphe (d'où Gr, pour éviter les clashes avec un sommet G)
    * Les graphes et le texte sont mis à jour systématiquement, ce qui permet de mieux voir les choses bouger en cours de code

11/11/2023
    * Les erreurs internes affichent un numéro de ligne dorénavant (en théorie elles ne devraient pas : c'est une erreur de la plateforme,
      pas de l'élève dans son code. En pratique, dans 99% des cas, c'est quand même une erreur dans le code de l'élève en plus 
      d’être une erreur dans le code de la plateforme qui traite incorrectement l'erreur de l'élève. Donc, c'est pas plus mal
      de dire à l'élève où est son erreur, en attendant que le prof corrige la sienne)
    * Ajout opérateur .**, synonyme de .^ (puissance, pour nombre ou matrice, booléenne), à la demande d'un élève

17/11/2023
    * Nouveau format de module (transparent pour les élèves. Mais permet au prof de créer plus facilement de nouveaux modules, sans coder)
    * Possibilité de déclarer des tableaux non vides. T=[5] ⇔ T=[]+5
        - Pour le cas ambigu du tableau à 2 valeurs, à l'image de la façon dont python désambiguise le 1-uplet et l'expression entre parenthèse
          — (1,) vs (1) —, on peut laisser une virgule traîner. [S1,S2] est l'arête [S1,S2]. [S1,S2,] est un tableau de 2 éléments content
          les valeurs S1 et S2
    * Nombres décimaux constants. Tels que 1.3d. Testez avec 1d+1d/1e30, et comparez avec 1+1/1e30. Et de façon plus importante 0.1+0.2!=0.3 alors que 0.1d+0.2d==0.3d
    * Ajout des opérateurs *= /= // (division entière) et //=

19/11/2023
    * Ajout des paramètres optionnels nommés dans les fonctions
    * À la demande d'un élève, ajout des chaînes '''bla''' qui peuvent s'étaler sur plusieurs lignes et servir de commentaire
    * print change de comportement pour adopter celui de python
        - print(1,2) affiche "1 2" et change de ligne (et non "12" sans changement de ligne comme avant)
        - print(1,2,end='', sep='') se comporte comme l'ancien print
        - println(...) se comporte toujours comme avant et devient un alias de print(..., sep='', end='\n')
        - printnr(...) se comporte comme l'ancien print, et est un alias de print(..., sep='', end='')
        - le print par défaut, comme en python est donc implicitement print(..., sep=' ', end='\n')
    * L'affichage des graphes se fait dans le thread de l'interface (et non du langage), ce qui permet d'afficher des graphes
      sans arrêter le code (aucun changement pour l'élève. Si ce n'est qu'il verra ses graphes bouger plus)
    * Index -1 pour les tableaux (T[-1]) les chaines, et pour pop
    * L'import d'un graphe implique l'effacement du graphe précédent (concrètement, plus besoin de "Graphe G" avant d'importer un nouveau graphe)

23/11/2023
    * À la demande d'un élève, "insert" pour insérer un élément dans un tableau à une position données. Les index négatifs, pour
      compter à partir de la fin de la liste sont possibles
    * Port dans la nouvealle version du mode "discovery" (qui permet d'afficher les graphes au fur et à mesure des marquage "visible")
      déjà présent en bricolage sur le serveur de l'enib

7/12/2023
    * Coloration syntaxique plus adaptée (jusque là c'était celle de python, avec un bricolage pour ajouter Sommet et Arc
      Dorénavant, elle ne devrait plus colorer les mots clés et fonctions standards de python qui n'existent pas dans le langage ROP

15/12/2023
    * Function 'type' pour savoir le type d'une valeur (type(1)="number", type(1d)="decimal", type(Gr)="graphe", type([1,2,3])="array", etc.)
    * À la demande d'un élève, possibilité de multiplier une matrice par un nombre
    * Fonctions `min`, `max`, acceptant des nombres (décimaux ou non), des tableaux, des matrices. Et retournant le minimum/maximum de tout ça
      min(Id, [2,30,4], 5) = 0 (le 0 qu'on trouve dans la matrice identité)
      max(Id, [2,30,4], 5) = 30 
    * fonction `int` -> convertit un nombre (décimal ou non, réel ou non) ou une chaine, en entier
    * Affiche les `print` déjà fait, même quand on termine sur une erreur (déjà inclus il y a 1 semaine sur le serveur)
    * Sauvegarde des fichiers dans le "cloud" (cad sur le serveur) au lieu du localStorage

