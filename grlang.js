/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grlang = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,31],$V3=[1,14],$V4=[1,30],$V5=[1,15],$V6=[1,20],$V7=[1,18],$V8=[1,19],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[1,6],$Vj=[1,8],$Vk=[1,9],$Vl=[1,10],$Vm=[1,11],$Vn=[1,3],$Vo=[1,37],$Vp=[1,46],$Vq=[1,48],$Vr=[1,49],$Vs=[1,47],$Vt=[1,45],$Vu=[1,53],$Vv=[1,42],$Vw=[1,43],$Vx=[1,52],$Vy=[1,50],$Vz=[1,51],$VA=[1,54],$VB=[1,55],$VC=[1,41],$VD=[1,44],$VE=[4,7,8,12,13,16,25,26,38,55,56,57,58,67,80],$VF=[2,29],$VG=[1,59],$VH=[10,18],$VI=[1,73],$VJ=[1,72],$VK=[2,100],$VL=[1,80],$VM=[2,27],$VN=[1,83],$VO=[4,7,8,12,13,15,16,25,26,27,28,29,30,31,33,34,36,37,38,39,43,49,50,87,90],$VP=[1,104],$VQ=[1,105],$VR=[1,88],$VS=[1,91],$VT=[1,110],$VU=[1,89],$VV=[1,90],$VW=[1,92],$VX=[1,93],$VY=[1,94],$VZ=[1,95],$V_=[1,96],$V$=[1,97],$V01=[1,98],$V11=[1,99],$V21=[1,100],$V31=[1,101],$V41=[1,102],$V51=[1,103],$V61=[1,106],$V71=[1,107],$V81=[1,108],$V91=[1,109],$Va1=[10,11,14,25,26,39,40,41,45,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$Vb1=[8,10,11,14,25,26,39,40,41,45,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$Vc1=[2,53],$Vd1=[1,123],$Ve1=[1,142],$Vf1=[10,11,14,39],$Vg1=[14,39],$Vh1=[1,154],$Vi1=[2,99],$Vj1=[10,11,14,39,40,41,45,62,63,64,65,66,67,73,76,77,78,79],$Vk1=[10,11,14,25,26,39,40,41,45,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$Vl1=[10,11,14,39,40,41,45,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$Vm1=[8,10,18,20,21,22,23,24,25,26,39,44,60],$Vn1=[10,11,14,39,40,41,45,62,63,64,65,76,77,78,79],$Vo1=[10,11,14,39,45,62,63,76,77,78,79],$Vp1=[10,11,14,39,40,41,45,62,63,64,65,66,67,68,69,70,71,73,74,76,77,78,79],$Vq1=[2,98],$Vr1=[10,11,14,39,45],$Vs1=[2,111],$Vt1=[1,227],$Vu1=[1,238],$Vv1=[1,239];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"instructionNoColon":3,"Sommet":4,"grapheSpec":5,"listeExpr":6,"Arete":7,"[":8,"expr":9,",":10,"]":11,"Arc":12,"(":13,")":14,"Graphe":15,"ID":16,"llvalue":17,"=":18,"lvalue":19,"+=":20,"*=":21,"-=":22,"/=":23,"//=":24,"++":25,"--":26,"break":27,"continue":28,"pass":29,"return":30,"global":31,"listID":32,"exit":33,"BEGIN":34,"manySemis":35,"END":36,"$":37,"STRING":38,";":39,"<":40,">":41,"instruction":42,"for":43,"in":44,":":45,"blocOuSingle":46,"range":47,"rangeStep":48,"while":49,"if":50,"elifs":51,"elif":52,"else":53,"atomicExpr":54,"NUMBER":55,"DECIMAL":56,"[]":57,"{}":58,"placeExpr":59,".":60,"borne":61,"==":62,"!=":63,">=":64,"<=":65,"+":66,"-":67,"*":68,"/":69,"//":70,"%":71,"**":72,".+":73,".*":74,".^":75,"?":76,"&&":77,"||":78,"xor":79,"!":80,"bracketExpr":81,"bracketExpr2":82,"bracketExpr3":83,"bloc":84,"listInst":85,"definition":86,"def":87,"listArgs":88,"listeInstOuDef":89,"EOF":90,"program":91,"$accept":0,"$end":1},
terminals_: {2:"error",4:"Sommet",7:"Arete",8:"[",10:",",11:"]",12:"Arc",13:"(",14:")",15:"Graphe",16:"ID",18:"=",20:"+=",21:"*=",22:"-=",23:"/=",24:"//=",25:"++",26:"--",27:"break",28:"continue",29:"pass",30:"return",31:"global",33:"exit",34:"BEGIN",36:"END",37:"$",38:"STRING",39:";",40:"<",41:">",43:"for",44:"in",45:":",47:"range",49:"while",50:"if",52:"elif",53:"else",55:"NUMBER",56:"DECIMAL",57:"[]",58:"{}",60:".",62:"==",63:"!=",64:">=",65:"<=",66:"+",67:"-",68:"*",69:"/",70:"//",71:"%",72:"**",73:".+",74:".*",75:".^",76:"?",77:"&&",78:"||",79:"xor",80:"!",87:"def",90:"EOF"},
productions_: [0,[3,3],[3,7],[3,7],[3,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,2],[3,2],[3,2],[3,3],[3,4],[3,1],[3,1],[3,1],[3,1],[3,2],[3,2],[3,4],[3,3],[3,1],[3,1],[35,0],[35,2],[5,0],[5,3],[42,2],[42,7],[42,13],[42,10],[42,5],[42,5],[42,6],[51,5],[51,6],[51,4],[48,2],[48,0],[6,1],[6,3],[54,1],[54,1],[54,1],[54,3],[54,4],[54,1],[54,1],[54,5],[59,1],[59,3],[59,4],[59,6],[59,6],[9,1],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,2],[9,2],[9,5],[9,3],[9,3],[9,3],[9,2],[9,3],[9,3],[9,7],[9,7],[9,3],[81,1],[81,3],[82,0],[82,1],[82,3],[83,0],[83,1],[61,1],[61,0],[19,1],[19,5],[19,5],[19,3],[19,4],[19,6],[17,1],[17,3],[46,1],[46,1],[84,4],[85,0],[85,2],[85,2],[86,6],[88,2],[88,3],[32,1],[32,3],[89,1],[89,2],[89,2],[89,2],[91,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	 this.$ = { t:"SOMMET", g:$$[$0-1], args:$$[$0], ln:_$[$0-2].first_line} ;
      
break;
case 2:

	 this.$ = { t:"ARETE", g:$$[$0-5], left: $$[$0-3], right: $$[$0-1], ln:_$[$0-6].first_line};
      
break;
case 3: case 88:

	 this.$ = { t:"Arc", g:$$[$0-5], left:$$[$0-3], right:$$[$0-1], ln:_$[$0-6].first_line};
      
break;
case 4:

         this.$ = { t:"Graphe", name:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 5:

	 this.$ = { t:"=", left: $$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 6:

         this.$ = { t:"+=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 7:

         this.$ = { t:"*=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 8:

	 this.$ = { t:"=", left: [$$[$0-2]], right: {t:"-", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line}, ln:_$[$0-1].first_line};
      
break;
case 9:

         this.$ = { t:"=", left:[$$[$0-2]], right:{t:"/", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line}, ln:_$[$0-1].first_line};
      
break;
case 10:

         this.$ = { t:"=", left:[$$[$0-2]], right:{t:"//", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line}, ln:_$[$0-1].first_line};
      
break;
case 11:

	 this.$ = { t:"++", left: $$[$0-1], ln:_$[$0].first_line};
      
break;
case 12:

	 this.$ = { t:"++", right: $$[$0-1], ln:_$[$0-1].first_line};
      
break;
case 13:

	 this.$ = { t:"--", left: $$[$0-1], ln:_$[$0].first_line};
      
break;
case 14:

	 this.$ = { t:"--", right: $$[$0-1], ln:_$[$0-1].first_line};
      
break;
case 15:

	 this.$ = { t:"call", f:$$[$0-2], args:[], ln:_$[$0-2].first_line};
      
break;
case 16:

	 this.$ = { t:"call", f:$$[$0-3], args:$$[$0-1], ln:_$[$0-3].first_line};
      
break;
case 17:

	 this.$ = {t:"break", ln:_$[$0].first_line};
      
break;
case 18:

	 this.$ = {t:"continue", ln:_$[$0].first_line};
      
break;
case 19:

         this.$ = {t:"pass", ln:_$[$0].first_line};
      
break;
case 20:

	 this.$ = {t:"return", val:undefined, ln:_$[$0].first_line};
      
break;
case 21:

	 this.$ = {t:"return", val:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 22:

	 this.$ = {t:"global", vars:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 23:

	 this.$ = {t:"exit", arg:$$[$0-1], ln:_$[$0-3].first_line};
      
break;
case 24:

         this.$ = {t:"pass"};
      
break;
case 25:

	 this.$ = {t:"$", i:$$[$0]};
      
break;
case 26:

         this.$ = {t:"string", val:$$[$0], ln:_$[$0].first_line};
      
break;
case 27: case 28: case 29: case 99:

         this.$=false;
      
break;
case 30:

         this.$=$$[$0-1];
      
break;
case 31: case 40:

         this.$ = $$[$0-1];
      
break;
case 32:

	 this.$ = { t:"foreach", compteur:$$[$0-5], range:$$[$0-3], do:$$[$0-1], ln:_$[$0-6].first_line};
      
break;
case 33:

	 this.$ = { t:"for", compteur:$$[$0-11], start:$$[$0-7], end:$$[$0-5], do:$$[$0-1], step:$$[$0-4], ln:_$[$0-12].first_line};
      
break;
case 34:

         this.$ = { t:"for", compteur:$$[$0-8], start:{t:"number", val:0}, end:$$[$0-4], step:false, do:$$[$0-1], ln:_$[$0-9].first_line};
      
break;
case 35:

	 this.$ = { t:"while", cond:$$[$0-3], do:$$[$0-1], ln:_$[$0-4].first_line };
      
break;
case 36:

	 this.$ = { t:"if", cond:$$[$0-3], do:$$[$0-1], else:[], ln:_$[$0-4].first_line };
      
break;
case 37:

         this.$ = { t:"if", cond:$$[$0-4], do:$$[$0-2], else:$$[$0], ln:_$[$0-5].first_line};
      
break;
case 38:

         this.$ = [{ t:"if", cond:$$[$0-3], do:$$[$0-1], else:[], ln:_$[$0-4].first_line}];
      
break;
case 39:

         this.$ = [{ t:"if", cond:$$[$0-4], do:$$[$0-2], else:$$[$0], ln:_$[$0-5].first_line}];
      
break;
case 41:

	 this.$ = $$[$0];
      
break;
case 42:

	 this.$ = false;
      
break;
case 43: case 108:

	 this.$ = [$$[$0]];
      
break;
case 44:

	 this.$ = $$[$0-2]; this.$.push($$[$0]);
      
break;
case 45:

	 this.$={t:"number", val:parseFloat($$[$0]), ln:_$[$0].first_line};
      
break;
case 46:

         this.$={t:"DECIMAL", s:$$[$0].slice(0,-1), ln:_$[$0].first_line};
      
break;
case 47:

	 this.$={t:"string", val:$$[$0], ln:_$[$0].first_line};
      
break;
case 48:

	 this.$={t: "call", f:$$[$0-2], args:[], ln:_$[$0-2].first_line};
      
break;
case 49:

	 this.$={t: "call", f:$$[$0-3], args:$$[$0-1], ln:_$[$0-3].first_line};
      
break;
case 50:

	 this.$={t: "array", val:[], ln:_$[$0].first_line};
      
break;
case 51:

         this.$={t:"struct", f:[], ln:_$[$0].first_line};
      
break;
case 52: case 101:

	 this.$={t: "arc", initial:$$[$0-3], terminal:$$[$0-1], ln:_$[$0-2].first_line};
      
break;
case 53: case 100:

	 this.$ = {t:"id", name:$$[$0], ln:_$[$0].first_line};
      
break;
case 54: case 103:

	 this.$={t: "field", o:$$[$0-2], f:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 55: case 104:

	 this.$={t:"index", tab:$$[$0-3], index:$$[$0-1], ln:_$[$0-2].first_line};
      
break;
case 56: case 105:

         this.$={t:"mindex", mat:$$[$0-5], i:$$[$0-3], j:$$[$0-1], ln:_$[$0-4].first_line};
      
break;
case 57:

         this.$={t:"subarray", tab:$$[$0-5], indexinf:$$[$0-3], indexsup:$$[$0-1], ln:_$[$0-4].firstline};
      
break;
case 58: case 59: case 109:

         this.$ = $$[$0];
      
break;
case 60:

	 this.$ = {t:"<", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 61:

	 this.$ = {t:"==", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 62:

	 this.$ = {t:"!=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 63:

	 this.$ = {t:">", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 64:

	 this.$ = {t:">=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 65:

	 this.$ = {t:"<=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 66:

	 this.$ = {t:"+", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 67:

	 this.$ = {t:"-", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 68:

         this.$ = {t:"-", left:{t:"number", val:0}, right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 69:

	 this.$ = {t:"*", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 70:

	 this.$ = {t:"/", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 71:

	 this.$ = {t:"//", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 72:

	 this.$ = {t:"%", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 73:

	 this.$ = {t:"**", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 74:

	 this.$ = {t:".+", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 75:

	 this.$ = {t:".*", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 76:

	 this.$ = {t:".^", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 77:

	 this.$ = {t:"++", left:$$[$0-1], right:undefined, ln:_$[$0].first_line};
      
break;
case 78:

	 this.$ = {t:"++", left:undefined, right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 79:

	 this.$ = {t:"--", left:$$[$0-1], right:undefined, ln:_$[$0].first_line};
      
break;
case 80:

	 this.$ = {t:"--", left:undefined, right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 81:

	 this.$ = {t:"?:", cond:$$[$0-4], oui:$$[$0-2], non:$$[$0], ln:_$[$0-3].first_line};
      
break;
case 82:

	 this.$ = {t:"&&", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 83:

	 this.$ = {t:"||", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 84:

         this.$ = {t:"xor", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 85:

	 this.$ = {t:"!", right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 86: case 110:

	 this.$ = $$[$0-1];
      
break;
case 87:

	 this.$={t:"SOMMET", g:$$[$0-1], arg:$$[$0], ln:_$[$0-2].first_line};
      
break;
case 89:

	 this.$ = { t:"Arete", g:$$[$0-5], left:$$[$0-3], right:$$[$0-1], ln:_$[$0-6].first_line};
      
break;
case 90:

         this.$ = $$[$0-1];
         this.$.ln=_$[$0-2].first_line;
      
break;
case 91:

         this.$ = {t:"staticArray", args:[$$[$0]], ln:_$[$0].first_line};
      
break;
case 92:

         if($$[$0-2].t=="id" && $$[$0].t=="id"){
	    this.$={t:"arete", initial: $$[$0-2].name, terminal: $$[$0].name, ln:_$[$0-2].first_line};
         }else if($$[$0].t=="id"){
            this.$ = {t:"staticArray", args:[$$[$0-2], $$[$0]], ln:_$[$0-2].first_line};
         }else{
            this.$ = {t:"staticArray", args:[$$[$0-2]].concat($$[$0].l), ln:_$[$0-2].first_line};
         }
      
break;
case 93:

         this.$={t:"list", l:[]};
      
break;
case 94:

         if($$[$0].t=="id") this.$=$$[$0];
         else this.$={t:"list", l:[$$[$0]]};
      
break;
case 95:

         this.$={t:"list", l:[$$[$0-2]].concat($$[$0])};
      
break;
case 96:

         this.$=[];
      
break;
case 97: case 98:

         this.$=$$[$0];
      
break;
case 102:

	 this.$={t:"arete", initial: $$[$0-3], terminal: $$[$0-1], ln:_$[$0-2].first_line};
      
break;
case 106: case 117:

	 this.$=[$$[$0]];
      
break;
case 107:

	 this.$=$$[$0-2];
	 this.$.push($$[$0]);
      
break;
case 111: case 119:

	 this.$ = [];
      
break;
case 112: case 122:

	 this.$=$$[$0];
      
break;
case 113: case 120: case 121:

	 this.$ = $$[$0];
	 this.$.unshift($$[$0-1]);
      
break;
case 114:

	 this.$ = {t:"DEF", nom: $$[$0-4], args:$$[$0-3], insts: $$[$0-1], ln:_$[$0-5].first_line};
      
break;
case 115:

	 this.$=[];
      
break;
case 116:

	 this.$=$$[$0-1];
      
break;
case 118:

	 this.$=$$[$0];
	 this.$.unshift($$[$0-2]);
      
break;
case 123:
 
	 return $$[$0];
      
break;
}
},
table: [{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vi,42:4,43:$Vj,49:$Vk,50:$Vl,86:5,87:$Vm,89:2,90:$Vn,91:1},{1:[3]},{1:[2,123]},{1:[2,119]},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vi,42:4,43:$Vj,49:$Vk,50:$Vl,86:5,87:$Vm,89:32,90:$Vn},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vi,42:4,43:$Vj,49:$Vk,50:$Vl,86:5,87:$Vm,89:33,90:$Vn},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vi,42:4,43:$Vj,49:$Vk,50:$Vl,86:5,87:$Vm,89:34,90:$Vn},{39:[1,35]},{8:$V2,13:$V4,16:$Vo,19:36},{4:$Vp,7:$Vq,8:$Vr,9:38,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:56,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{16:[1,57]},o($VE,$VF,{5:58,40:$VG}),{5:60,8:$VF,40:$VG},{5:61,13:$VF,40:$VG},{16:[1,62]},{10:[1,64],18:[1,63]},o($VH,[2,106],{8:$VI,20:[1,65],21:[1,66],22:[1,67],23:[1,68],24:[1,69],25:[1,70],26:[1,71],60:$VJ}),{8:$V2,13:$V4,16:$Vo,19:74},{8:$V2,13:$V4,16:$Vo,19:75},o([8,10,18,20,21,22,23,24,25,26,60],$VK,{13:[1,76]}),{39:[2,17]},{39:[2,18]},{39:[2,19]},{4:$Vp,6:77,7:$Vq,8:$Vr,9:78,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,39:[2,20],54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{16:$VL,32:79},{13:[1,81]},{35:82,36:$VM,39:$VN},{39:[2,25]},{39:[2,26]},{16:[1,84]},{16:[1,85]},{1:[2,120]},{1:[2,121]},{1:[2,122]},o($VO,[2,31]),{8:$VI,44:[1,86],60:$VJ},o([8,10,18,39,44,60],$VK),{25:$VP,26:$VQ,40:$VR,41:$VS,45:[1,87],60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($Va1,[2,58]),o($Va1,[2,59],{8:[1,111]}),{4:$Vp,7:$Vq,8:$Vr,9:112,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:113,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:114,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:115,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:116,12:$Vs,13:$Vt,16:[1,117],25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},o($VE,$VF,{5:118,40:$VG}),{5:119,13:$VF,40:$VG},{5:120,8:$VF,40:$VG},{4:$Vp,7:$Vq,8:$Vr,9:122,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD,81:121},o($Va1,[2,45]),o($Va1,[2,46]),o($Va1,[2,47]),o($Vb1,$Vc1,{13:$Vd1}),o($Va1,[2,50]),o($Va1,[2,51]),{25:$VP,26:$VQ,40:$VR,41:$VS,45:[1,124],60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{13:[1,126],88:125},{4:$Vp,6:127,7:$Vq,8:$Vr,9:78,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{16:[1,128]},{8:[1,129]},{13:[1,130]},{39:[2,4]},{4:$Vp,7:$Vq,8:$Vr,9:131,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{8:$V2,13:$V4,16:$Vo,19:132},{4:$Vp,7:$Vq,8:$Vr,9:133,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:134,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:135,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:136,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:137,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{39:[2,11]},{39:[2,13]},{16:[1,138]},{4:$Vp,7:$Vq,8:$Vr,9:139,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{8:$VI,39:[2,12],60:$VJ},{8:$VI,39:[2,14],60:$VJ},{4:$Vp,6:141,7:$Vq,8:$Vr,9:78,12:$Vs,13:$Vt,14:[1,140],16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{10:$Ve1,39:[2,21]},o($Vf1,[2,43],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91}),{39:[2,22]},o($Vg1,[2,117],{10:[1,143]}),{4:$Vp,7:$Vq,8:$Vr,9:144,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{36:[1,145]},{35:146,36:$VM,39:$VN},{10:[1,147]},{10:[1,148]},{4:$Vp,7:$Vq,8:$Vr,9:149,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,47:[1,150],54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{3:152,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vh1,46:151,84:153},{4:$Vp,7:$Vq,8:$Vr,9:155,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:156,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:157,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:158,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:159,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:160,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:161,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:162,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:163,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:164,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:165,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:166,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:167,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:168,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:169,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:170,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},o($Va1,[2,77]),o($Va1,[2,79]),{4:$Vp,7:$Vq,8:$Vr,9:171,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:172,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:173,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:174,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{16:[1,175]},{4:$Vp,7:$Vq,8:$Vr,9:176,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,45:$Vi1,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,61:177,67:$VC,80:$VD},o($Vj1,[2,68],{25:$VP,26:$VQ,60:$VT,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,74:$V41,75:$V51}),o($Vk1,[2,78],{60:$VT}),o($Vk1,[2,80],{60:$VT}),o($Vl1,[2,85],{25:$VP,26:$VQ,60:$VT}),{14:[1,178],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o([8,14,25,26,40,41,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$Vc1,{10:[1,179],13:$Vd1}),{4:$Vp,7:$Vq,8:$Vr,9:180,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{13:[1,181]},{8:[1,182]},{11:[1,183]},{10:[1,184],11:[2,91],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{4:$Vp,6:186,7:$Vq,8:$Vr,9:78,12:$Vs,13:$Vt,14:[1,185],16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{3:152,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vh1,46:187,84:153},{45:[1,188]},{14:[1,189],16:$VL,32:190},{10:$Ve1,39:[2,1]},{41:[1,191]},{4:$Vp,7:$Vq,8:$Vr,9:192,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:193,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{25:$VP,26:$VQ,39:[2,5],40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($VH,[2,107],{8:$VI,60:$VJ}),{25:$VP,26:$VQ,39:[2,6],40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{25:$VP,26:$VQ,39:[2,7],40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{25:$VP,26:$VQ,39:[2,8],40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{25:$VP,26:$VQ,39:[2,9],40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{25:$VP,26:$VQ,39:[2,10],40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($Vm1,[2,103]),{10:[1,195],11:[1,194],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{39:[2,15]},{10:$Ve1,14:[1,196]},{4:$Vp,7:$Vq,8:$Vr,9:197,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{16:$VL,32:198},{14:[1,199],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{39:[2,24]},{36:[2,28]},{16:[1,200]},{16:[1,201]},{25:$VP,26:$VQ,40:$VR,41:$VS,45:[1,202],60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{13:[1,203]},{39:[1,204]},{39:[2,108]},{39:[2,109]},{34:[1,205]},o($Vn1,[2,60],{25:$VP,26:$VQ,60:$VT,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51}),o($Vo1,[2,61],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51}),o($Vo1,[2,62],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51}),o($Vn1,[2,63],{25:$VP,26:$VQ,60:$VT,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51}),o($Vn1,[2,64],{25:$VP,26:$VQ,60:$VT,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51}),o($Vn1,[2,65],{25:$VP,26:$VQ,60:$VT,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51}),o($Vj1,[2,66],{25:$VP,26:$VQ,60:$VT,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,74:$V41,75:$V51}),o($Vj1,[2,67],{25:$VP,26:$VQ,60:$VT,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,74:$V41,75:$V51}),o($Vp1,[2,69],{25:$VP,26:$VQ,60:$VT,72:$V21,75:$V51}),o($Vp1,[2,70],{25:$VP,26:$VQ,60:$VT,72:$V21,75:$V51}),o($Vp1,[2,71],{25:$VP,26:$VQ,60:$VT,72:$V21,75:$V51}),o($Vp1,[2,72],{25:$VP,26:$VQ,60:$VT,72:$V21,75:$V51}),o($Vl1,[2,73],{25:$VP,26:$VQ,60:$VT}),o($Vj1,[2,74],{25:$VP,26:$VQ,60:$VT,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,74:$V41,75:$V51}),o($Vp1,[2,75],{25:$VP,26:$VQ,60:$VT,72:$V21,75:$V51}),o($Vl1,[2,76],{25:$VP,26:$VQ,60:$VT}),{25:$VP,26:$VQ,40:$VR,41:$VS,45:[1,206],60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o([10,11,14,39,45,76,77,78,79],[2,82],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51}),o([10,11,14,39,45,76,78],[2,83],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,77:$V71,79:$V91}),o([10,11,14,39,45,76,78,79],[2,84],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,77:$V71}),o($Vb1,[2,54]),{10:[1,208],11:[1,207],25:$VP,26:$VQ,40:$VR,41:$VS,45:$Vq1,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{45:[1,209]},o($Va1,[2,86]),{16:[1,210]},o($Vr1,[2,87],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91}),{4:$Vp,7:$Vq,8:$Vr,9:211,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:212,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},o($Va1,[2,90]),{4:$Vp,7:$Vq,8:$Vr,9:214,11:[2,93],12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD,82:213},o($Va1,[2,48]),{10:$Ve1,14:[1,215]},{39:[1,216]},{39:$Vh1,84:217},{45:[2,115]},{14:[1,218]},o($VE,[2,30]),{10:[1,219],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{10:[1,220],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($Vm1,[2,104]),{4:$Vp,7:$Vq,8:$Vr,9:221,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{39:[2,16]},o($Vf1,[2,44],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91}),o($Vg1,[2,118]),{39:[2,23]},{14:[1,222]},{11:[1,223]},{3:152,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vh1,46:224,84:153},{4:$Vp,7:$Vq,8:$Vr,9:225,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},o($VO,[2,35]),{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,36:$Vs1,37:$Vg,38:$Vh,39:$Vt1,42:228,43:$Vj,49:$Vk,50:$Vl,85:226},{4:$Vp,7:$Vq,8:$Vr,9:229,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},o($Vb1,[2,55]),{4:$Vp,7:$Vq,8:$Vr,9:230,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:232,11:$Vi1,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,61:231,67:$VC,80:$VD},{14:[1,233]},{10:[1,234],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{10:[1,235],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{11:[2,92]},{10:[1,236],11:[2,94],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($Va1,[2,49]),o($VO,[2,36],{51:237,52:$Vu1,53:$Vv1}),{39:[1,240]},{45:[2,116]},{4:$Vp,7:$Vq,8:$Vr,9:241,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:242,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{11:[1,243],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($Vm1,[2,101]),o($Vm1,[2,102]),{39:[1,244]},{10:[1,245],14:[1,246],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{36:[1,247]},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,36:$Vs1,37:$Vg,38:$Vh,39:$Vt1,42:228,43:$Vj,49:$Vk,50:$Vl,85:248},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,36:$Vs1,37:$Vg,38:$Vh,39:$Vt1,42:228,43:$Vj,49:$Vk,50:$Vl,85:249},o($Vr1,[2,81],{25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91}),{11:[1,250],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{11:[1,251]},{11:$Vq1,25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($Va1,[2,52]),{4:$Vp,7:$Vq,8:$Vr,9:252,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,7:$Vq,8:$Vr,9:253,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{4:$Vp,6:255,7:$Vq,8:$Vr,9:78,11:[2,96],12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD,83:254},o($VO,[2,37]),{4:$Vp,7:$Vq,8:$Vr,9:256,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{45:[1,257]},o([4,7,8,12,13,15,16,25,26,27,28,29,30,31,33,34,37,38,39,43,49,50,87,90],[2,114]),{11:[1,258],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{14:[1,259],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($Vm1,[2,105]),o($VO,[2,32]),{4:$Vp,7:$Vq,8:$Vr,9:260,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{45:[1,261]},{39:[2,110]},{36:[2,112]},{36:[2,113]},o($Vb1,[2,56]),o($Vb1,[2,57]),{14:[1,262],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{11:[1,263],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{11:[2,95]},{10:$Ve1,11:[2,97]},{25:$VP,26:$VQ,40:$VR,41:$VS,45:[1,264],60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{3:152,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vh1,46:265,84:153},{39:[2,2]},{39:[2,3]},{10:[1,267],14:[2,42],25:$VP,26:$VQ,40:$VR,41:$VS,48:266,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},{3:152,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vh1,46:268,84:153},o($Va1,[2,88]),o($Va1,[2,89]),{3:152,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vh1,46:269,84:153},{39:[1,270]},{14:[1,271]},{4:$Vp,7:$Vq,8:$Vr,9:272,12:$Vs,13:$Vt,16:$Vu,25:$Vv,26:$Vw,38:$Vx,54:39,55:$Vy,56:$Vz,57:$VA,58:$VB,59:40,67:$VC,80:$VD},{39:[1,273]},{39:[1,274]},o($VO,[2,40]),{45:[1,275]},{14:[2,41],25:$VP,26:$VQ,40:$VR,41:$VS,60:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41,75:$V51,76:$V61,77:$V71,78:$V81,79:$V91},o($VO,[2,34]),o($VO,[2,38],{51:276,52:$Vu1,53:$Vv1}),{3:152,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,25:$V7,26:$V8,27:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,33:$Ve,34:$Vf,37:$Vg,38:$Vh,39:$Vh1,46:277,84:153},o($VO,[2,39]),{39:[1,278]},o($VO,[2,33])],
defaultActions: {2:[2,123],3:[2,119],21:[2,17],22:[2,18],23:[2,19],28:[2,25],29:[2,26],32:[2,120],33:[2,121],34:[2,122],62:[2,4],70:[2,11],71:[2,13],79:[2,22],140:[2,15],145:[2,24],146:[2,28],152:[2,108],153:[2,109],189:[2,115],196:[2,16],199:[2,23],213:[2,92],218:[2,116],247:[2,110],248:[2,112],249:[2,113],254:[2,95],258:[2,2],259:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


// © C. Le Gal 2017-2023
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore */
break;
case 1:/* Ignore */
break;
case 2:return ";"
break;
case 3:return "BEGIN";
break;
case 4:return "END";
break;
case 5:return ";"
break;
case 6:return 56
break;
case 7:return 55
break;
case 8:this.begin("string"); yy._clg_stringBuf="";
break;
case 9:this.popState(); yy_.yytext=yy._clg_stringBuf; return "STRING";
break;
case 10:yy._clg_stringBuf += yy_.yytext;
break;
case 11:yy._clg_stringBuf += "\n";
break;
case 12:yy._clg_stringBuf += yy_.yytext.slice(1);
break;
case 13:this.begin("stringqqq"); yy._clg_stringBuf="";
break;
case 14:this.popState(); yy_.yytext=yy._clg_stringBuf; return "STRING";
break;
case 15:yy._clg_stringBuf += yy_.yytext;
break;
case 16:yy._clg_stringBuf += yy_.yytext.slice(1);
break;
case 17:this.begin("stringq"); yy._clg_stringBuf="";
break;
case 18:this.popState(); yy_.yytext=yy._clg_stringBuf; return "STRING";
break;
case 19:yy._clg_stringBuf += yy_.yytext;
break;
case 20:yy._clg_stringBuf += "\n";
break;
case 21:yy._clg_stringBuf += yy_.yytext.slice(1);
break;
case 22:return "+="
break;
case 23:return "*="
break;
case 24:return "-="
break;
case 25:return "//="
break;
case 26:return "/="
break;
case 27:return "//"
break;
case 28:return "++"
break;
case 29:return "--"
break;
case 30:return "=="
break;
case 31:return "**"
break;
case 32:return "!="
break;
case 33:return "<="
break;
case 34:return ">="
break;
case 35:return "&&"
break;
case 36:return "&&"
break;
case 37:return "||"
break;
case 38:return "||"
break;
case 39:return "xor"
break;
case 40:return "xor"
break;
case 41:return ".+"
break;
case 42:return ".^"
break;
case 43:return "**"
break;
case 44:return ".*"
break;
case 45:return ".^"
break;
case 46:return "[]"
break;
case 47:return "{}"
break;
case 48:return "="
break;
case 49:return "["
break;
case 50:return "]"
break;
case 51:return ","
break;
case 52:return "("
break;
case 53:return ")"
break;
case 54:return ":"
break;
case 55:return "."
break;
case 56:return "+"
break;
case 57:return "<"
break;
case 58:return ">"
break;
case 59:return "-"
break;
case 60:return "*"
break;
case 61:return "%"
break;
case 62:return "/"
break;
case 63:return "?"
break;
case 64:return "!"
break;
case 65:return "$"
break;
case 66:return "Sommet"
break;
case 67:return "Arete"
break;
case 68:return "Graphe"
break;
case 69:return "Arc"
break;
case 70:return "def"
break;
case 71:return "for"
break;
case 72:return "while"
break;
case 73:return "if"
break;
case 74:return "else"
break;
case 75:return "elif"
break;
case 76:return "continue"
break;
case 77:return "break"
break;
case 78:return "pass"
break;
case 79:return "in"
break;
case 80:return "global"
break;
case 81:return "return"
break;
case 82:return "range"
break;
case 83:return "exit"
break;
case 84:return "ID"
break;
case 85:return 90
break;
case 86:return 'INVALID'
break;
}
},
rules: [/^(?:#.*)/,/^(?: +)/,/^(?:[\n])/,/^(?:§\{)/,/^(?:§\})/,/^(?:§;)/,/^(?:[0-9]+(\.[0-9]+)?((E|e)(-)?[0-9]+)?(d|D)\b)/,/^(?:[0-9]+(\.[0-9]+)?((E|e)-?[0-9]+)?\b)/,/^(?:["])/,/^(?:["])/,/^(?:[^"\\\n])/,/^(?:\\n)/,/^(?:\\[^\n])/,/^(?:''')/,/^(?:''')/,/^(?:[^\\])/,/^(?:\\.)/,/^(?:['])/,/^(?:['])/,/^(?:[^'\\\n])/,/^(?:\\n)/,/^(?:\\[^\n])/,/^(?:\+=)/,/^(?:\*=)/,/^(?:-=)/,/^(?:\/\/=)/,/^(?:\/=)/,/^(?:\/\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:\^)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:&&)/,/^(?:and\b)/,/^(?:\|\|)/,/^(?:or\b)/,/^(?:xor\b)/,/^(?:\^\^)/,/^(?:\.\+)/,/^(?:\.\*\*)/,/^(?:\*\*)/,/^(?:\.\*)/,/^(?:\.\^)/,/^(?:\[\])/,/^(?:\{\})/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:\.)/,/^(?:\+)/,/^(?:<)/,/^(?:>)/,/^(?:-)/,/^(?:\*)/,/^(?:%)/,/^(?:\/)/,/^(?:\?)/,/^(?:!)/,/^(?:\$.*)/,/^(?:Sommet\b)/,/^(?:Arete\b)/,/^(?:Graphe\b)/,/^(?:Arc\b)/,/^(?:def\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:pass\b)/,/^(?:in\b)/,/^(?:global\b)/,/^(?:return\b)/,/^(?:range\b)/,/^(?:exit\b)/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"stringq":{"rules":[18,19,20,21],"inclusive":false},"string":{"rules":[9,10,11,12],"inclusive":false},"stringqqq":{"rules":[14,15,16],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,13,17,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grlang;
exports.Parser = grlang.Parser;
exports.parse = function () { return grlang.parse.apply(grlang, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}export default grlang;
