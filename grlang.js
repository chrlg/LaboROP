/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grlang = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,30],$V3=[1,14],$V4=[1,29],$V5=[1,15],$V6=[1,20],$V7=[1,18],$V8=[1,19],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[1,6],$Vi=[1,8],$Vj=[1,9],$Vk=[1,10],$Vl=[1,11],$Vm=[1,3],$Vn=[1,36],$Vo=[1,45],$Vp=[1,47],$Vq=[1,48],$Vr=[1,46],$Vs=[1,44],$Vt=[1,52],$Vu=[1,41],$Vv=[1,42],$Vw=[1,49],$Vx=[1,50],$Vy=[1,51],$Vz=[1,53],$VA=[1,54],$VB=[1,40],$VC=[1,43],$VD=[4,7,8,12,13,16,23,24,52,53,54,55,56,65,77],$VE=[2,26],$VF=[1,58],$VG=[10,18],$VH=[1,70],$VI=[1,69],$VJ=[2,96],$VK=[1,77],$VL=[2,24],$VM=[1,80],$VN=[4,7,8,12,13,15,16,23,24,25,26,27,28,29,31,32,34,35,36,40,46,47,84,87],$VO=[1,100],$VP=[1,101],$VQ=[1,85],$VR=[1,88],$VS=[1,106],$VT=[1,86],$VU=[1,87],$VV=[1,89],$VW=[1,90],$VX=[1,91],$VY=[1,92],$VZ=[1,93],$V_=[1,94],$V$=[1,95],$V01=[1,96],$V11=[1,97],$V21=[1,98],$V31=[1,99],$V41=[1,102],$V51=[1,103],$V61=[1,104],$V71=[1,105],$V81=[10,11,14,23,24,36,37,38,42,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$V91=[8,10,11,14,23,24,36,37,38,42,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Va1=[2,50],$Vb1=[1,119],$Vc1=[1,136],$Vd1=[10,11,14,36],$Ve1=[14,36],$Vf1=[1,148],$Vg1=[2,95],$Vh1=[10,11,14,36,37,38,42,60,61,62,63,64,65,70,73,74,75,76],$Vi1=[10,11,14,23,24,36,37,38,42,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Vj1=[10,11,14,36,37,38,42,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Vk1=[8,10,18,20,21,22,23,24,36,41,58],$Vl1=[10,11,14,36,37,38,42,60,61,62,63,73,74,75,76],$Vm1=[10,11,14,36,42,60,61,73,74,75,76],$Vn1=[10,11,14,36,37,38,42,60,61,62,63,64,65,66,67,68,70,71,73,74,75,76],$Vo1=[2,94],$Vp1=[10,11,14,36,42],$Vq1=[2,107],$Vr1=[1,220],$Vs1=[1,231],$Vt1=[1,232];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"instructionNoColon":3,"Sommet":4,"grapheSpec":5,"listeExpr":6,"Arete":7,"[":8,"expr":9,",":10,"]":11,"Arc":12,"(":13,")":14,"Graphe":15,"ID":16,"llvalue":17,"=":18,"lvalue":19,"+=":20,"*=":21,"-=":22,"++":23,"--":24,"break":25,"continue":26,"pass":27,"return":28,"global":29,"listID":30,"exit":31,"BEGIN":32,"manySemis":33,"END":34,"$":35,";":36,"<":37,">":38,"instruction":39,"for":40,"in":41,":":42,"blocOuSingle":43,"range":44,"rangeStep":45,"while":46,"if":47,"elifs":48,"elif":49,"else":50,"atomicExpr":51,"NUMBER":52,"DECIMAL":53,"STRING":54,"[]":55,"{}":56,"placeExpr":57,".":58,"borne":59,"==":60,"!=":61,">=":62,"<=":63,"+":64,"-":65,"*":66,"/":67,"%":68,"**":69,".+":70,".*":71,".^":72,"?":73,"&&":74,"||":75,"xor":76,"!":77,"bracketExpr":78,"bracketExpr2":79,"bracketExpr3":80,"bloc":81,"listInst":82,"definition":83,"def":84,"listArgs":85,"listeInstOuDef":86,"EOF":87,"program":88,"$accept":0,"$end":1},
terminals_: {2:"error",4:"Sommet",7:"Arete",8:"[",10:",",11:"]",12:"Arc",13:"(",14:")",15:"Graphe",16:"ID",18:"=",20:"+=",21:"*=",22:"-=",23:"++",24:"--",25:"break",26:"continue",27:"pass",28:"return",29:"global",31:"exit",32:"BEGIN",34:"END",35:"$",36:";",37:"<",38:">",40:"for",41:"in",42:":",44:"range",46:"while",47:"if",49:"elif",50:"else",52:"NUMBER",53:"DECIMAL",54:"STRING",55:"[]",56:"{}",58:".",60:"==",61:"!=",62:">=",63:"<=",64:"+",65:"-",66:"*",67:"/",68:"%",69:"**",70:".+",71:".*",72:".^",73:"?",74:"&&",75:"||",76:"xor",77:"!",84:"def",87:"EOF"},
productions_: [0,[3,3],[3,7],[3,7],[3,2],[3,3],[3,3],[3,3],[3,3],[3,2],[3,2],[3,2],[3,2],[3,3],[3,4],[3,1],[3,1],[3,1],[3,1],[3,2],[3,2],[3,4],[3,3],[3,1],[33,0],[33,2],[5,0],[5,3],[39,2],[39,7],[39,13],[39,10],[39,5],[39,5],[39,6],[48,5],[48,6],[48,4],[45,2],[45,0],[6,1],[6,3],[51,1],[51,1],[51,1],[51,3],[51,4],[51,1],[51,1],[51,5],[57,1],[57,3],[57,4],[57,6],[57,6],[9,1],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,2],[9,2],[9,5],[9,3],[9,3],[9,3],[9,2],[9,3],[9,3],[9,7],[9,7],[9,3],[78,1],[78,3],[79,0],[79,1],[79,3],[80,0],[80,1],[59,1],[59,0],[19,1],[19,5],[19,5],[19,3],[19,4],[19,6],[17,1],[17,3],[43,1],[43,1],[81,4],[82,0],[82,2],[82,2],[83,6],[85,2],[85,3],[30,1],[30,3],[86,1],[86,2],[86,2],[86,2],[88,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	 this.$ = { t:"SOMMET", g:$$[$0-1], args:$$[$0], ln:_$[$0-2].first_line} ;
      
break;
case 2:

	 this.$ = { t:"ARETE", g:$$[$0-5], left: $$[$0-3], right: $$[$0-1], ln:_$[$0-6].first_line};
      
break;
case 3: case 84:

	 this.$ = { t:"Arc", g:$$[$0-5], left:$$[$0-3], right:$$[$0-1], ln:_$[$0-6].first_line};
      
break;
case 4:

         this.$ = { t:"Graphe", name:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 5:

	 this.$ = { t:"=", left: $$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 6:

         this.$ = { t:"+=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 7:

         this.$ = { t:"*=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 8:

	 this.$ = { t:"=", left: [$$[$0-2]], right: {t:"-", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line}, ln:_$[$0-1].first_line};
      
break;
case 9:

	 this.$ = { t:"++", left: $$[$0-1], ln:_$[$0].first_line};
      
break;
case 10:

	 this.$ = { t:"++", right: $$[$0-1], ln:_$[$0-1].first_line};
      
break;
case 11:

	 this.$ = { t:"--", left: $$[$0-1], ln:_$[$0].first_line};
      
break;
case 12:

	 this.$ = { t:"--", right: $$[$0-1], ln:_$[$0-1].first_line};
      
break;
case 13:

	 this.$ = { t:"call", f:$$[$0-2], args:[], ln:_$[$0-2].first_line};
      
break;
case 14:

	 this.$ = { t:"call", f:$$[$0-3], args:$$[$0-1], ln:_$[$0-3].first_line};
      
break;
case 15:

	 this.$ = {t:"break", ln:_$[$0].first_line};
      
break;
case 16:

	 this.$ = {t:"continue", ln:_$[$0].first_line};
      
break;
case 17:

         this.$ = {t:"pass", ln:_$[$0].first_line};
      
break;
case 18:

	 this.$ = {t:"return", val:undefined, ln:_$[$0].first_line};
      
break;
case 19:

	 this.$ = {t:"return", val:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 20:

	 this.$ = {t:"global", vars:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 21:

	 this.$ = {t:"exit", arg:$$[$0-1], ln:_$[$0-3].first_line};
      
break;
case 22:

         this.$ = {t:"pass"};
      
break;
case 23:

	 this.$ = {t:"$", i:$$[$0]};
      
break;
case 24: case 25: case 26: case 95:

         this.$=false;
      
break;
case 27:

         this.$=$$[$0-1];
      
break;
case 28: case 37:

         this.$ = $$[$0-1];
      
break;
case 29:

	 this.$ = { t:"foreach", compteur:$$[$0-5], range:$$[$0-3], do:$$[$0-1], ln:_$[$0-6].first_line};
      
break;
case 30:

	 this.$ = { t:"for", compteur:$$[$0-11], start:$$[$0-7], end:$$[$0-5], do:$$[$0-1], step:$$[$0-4], ln:_$[$0-12].first_line};
      
break;
case 31:

         this.$ = { t:"for", compteur:$$[$0-8], start:{t:"number", val:0}, end:$$[$0-4], step:false, do:$$[$0-1], ln:_$[$0-9].first_line};
      
break;
case 32:

	 this.$ = { t:"while", cond:$$[$0-3], do:$$[$0-1], ln:_$[$0-4].first_line };
      
break;
case 33:

	 this.$ = { t:"if", cond:$$[$0-3], do:$$[$0-1], else:[], ln:_$[$0-4].first_line };
      
break;
case 34:

         this.$ = { t:"if", cond:$$[$0-4], do:$$[$0-2], else:$$[$0], ln:_$[$0-5].first_line};
      
break;
case 35:

         this.$ = [{ t:"if", cond:$$[$0-3], do:$$[$0-1], else:[], ln:_$[$0-4].first_line}];
      
break;
case 36:

         this.$ = [{ t:"if", cond:$$[$0-4], do:$$[$0-2], else:$$[$0], ln:_$[$0-5].first_line}];
      
break;
case 38:

	 this.$ = $$[$0];
      
break;
case 39:

	 this.$ = false;
      
break;
case 40: case 104:

	 this.$ = [$$[$0]];
      
break;
case 41:

	 this.$ = $$[$0-2]; this.$.push($$[$0]);
      
break;
case 42:

	 this.$={t:"number", val:parseFloat($$[$0]), ln:_$[$0].first_line};
      
break;
case 43:

         this.$={t:"DECIMAL", s:$$[$0].slice(0,-1), ln:_$[$0].first_line};
      
break;
case 44:

	 this.$={t:"string", val:$$[$0], ln:_$[$0].first_line};
      
break;
case 45:

	 this.$={t: "call", f:$$[$0-2], args:[], ln:_$[$0-2].first_line};
      
break;
case 46:

	 this.$={t: "call", f:$$[$0-3], args:$$[$0-1], ln:_$[$0-3].first_line};
      
break;
case 47:

	 this.$={t: "array", val:[], ln:_$[$0].first_line};
      
break;
case 48:

         this.$={t:"struct", f:[], ln:_$[$0].first_line};
      
break;
case 49: case 97:

	 this.$={t: "arc", initial:$$[$0-3], terminal:$$[$0-1], ln:_$[$0-2].first_line};
      
break;
case 50: case 96:

	 this.$ = {t:"id", name:$$[$0], ln:_$[$0].first_line};
      
break;
case 51: case 99:

	 this.$={t: "field", o:$$[$0-2], f:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 52: case 100:

	 this.$={t:"index", tab:$$[$0-3], index:$$[$0-1], ln:_$[$0-2].first_line};
      
break;
case 53: case 101:

         this.$={t:"mindex", mat:$$[$0-5], i:$$[$0-3], j:$$[$0-1], ln:_$[$0-4].first_line};
      
break;
case 54:

         this.$={t:"subarray", tab:$$[$0-5], indexinf:$$[$0-3], indexsup:$$[$0-1], ln:_$[$0-4].firstline};
      
break;
case 55: case 56: case 105:

         this.$ = $$[$0];
      
break;
case 57:

	 this.$ = {t:"<", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 58:

	 this.$ = {t:"==", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 59:

	 this.$ = {t:"!=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 60:

	 this.$ = {t:">", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 61:

	 this.$ = {t:">=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 62:

	 this.$ = {t:"<=", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 63:

	 this.$ = {t:"+", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 64:

	 this.$ = {t:"-", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 65:

         this.$ = {t:"-", left:{t:"number", val:0}, right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 66:

	 this.$ = {t:"*", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 67:

	 this.$ = {t:"/", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 68:

	 this.$ = {t:"%", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 69:

	 this.$ = {t:"**", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 70:

	 this.$ = {t:".+", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 71:

	 this.$ = {t:".*", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 72:

	 this.$ = {t:".^", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 73:

	 this.$ = {t:"++", left:$$[$0-1], right:undefined, ln:_$[$0].first_line};
      
break;
case 74:

	 this.$ = {t:"++", left:undefined, right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 75:

	 this.$ = {t:"--", left:$$[$0-1], right:undefined, ln:_$[$0].first_line};
      
break;
case 76:

	 this.$ = {t:"--", left:undefined, right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 77:

	 this.$ = {t:"?:", cond:$$[$0-4], oui:$$[$0-2], non:$$[$0], ln:_$[$0-3].first_line};
      
break;
case 78:

	 this.$ = {t:"&&", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 79:

	 this.$ = {t:"||", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 80:

         this.$ = {t:"xor", left:$$[$0-2], right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 81:

	 this.$ = {t:"!", right:$$[$0], ln:_$[$0-1].first_line};
      
break;
case 82: case 106:

	 this.$ = $$[$0-1];
      
break;
case 83:

	 this.$={t:"SOMMET", g:$$[$0-1], arg:$$[$0], ln:_$[$0-2].first_line};
      
break;
case 85:

	 this.$ = { t:"Arete", g:$$[$0-5], left:$$[$0-3], right:$$[$0-1], ln:_$[$0-6].first_line};
      
break;
case 86:

         this.$ = $$[$0-1];
         this.$.ln=_$[$0-2].first_line;
      
break;
case 87:

         this.$ = {t:"staticArray", args:[$$[$0]], ln:_$[$0].first_line};
      
break;
case 88:

         if($$[$0-2].t=="id" && $$[$0].t=="id"){
	    this.$={t:"arete", initial: $$[$0-2].name, terminal: $$[$0].name, ln:_$[$0-2].first_line};
         }else if($$[$0].t=="id"){
            this.$ = {t:"staticArray", args:[$$[$0-2], $$[$0]], ln:_$[$0-2].first_line};
         }else{
            this.$ = {t:"staticArray", args:[$$[$0-2]].concat($$[$0].l), ln:_$[$0-2].first_line};
         }
      
break;
case 89:

         this.$={t:"list", l:[]};
      
break;
case 90:

         if($$[$0].t=="id") this.$=$$[$0];
         else this.$={t:"list", l:[$$[$0]]};
      
break;
case 91:

         this.$={t:"list", l:[$$[$0-2]].concat($$[$0])};
      
break;
case 92:

         this.$=[];
      
break;
case 93: case 94:

         this.$=$$[$0];
      
break;
case 98:

	 this.$={t:"arete", initial: $$[$0-3], terminal: $$[$0-1], ln:_$[$0-2].first_line};
      
break;
case 102: case 113:

	 this.$=[$$[$0]];
      
break;
case 103:

	 this.$=$$[$0-2];
	 this.$.push($$[$0]);
      
break;
case 107: case 115:

	 this.$ = [];
      
break;
case 108: case 118:

	 this.$=$$[$0];
      
break;
case 109: case 116: case 117:

	 this.$ = $$[$0];
	 this.$.unshift($$[$0-1]);
      
break;
case 110:

	 this.$ = {t:"DEF", nom: $$[$0-4], args:$$[$0-3], insts: $$[$0-1], ln:_$[$0-5].first_line};
      
break;
case 111:

	 this.$=[];
      
break;
case 112:

	 this.$=$$[$0-1];
      
break;
case 114:

	 this.$=$$[$0];
	 this.$.unshift($$[$0-2]);
      
break;
case 119:
 
	 return $$[$0];
      
break;
}
},
table: [{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vh,39:4,40:$Vi,46:$Vj,47:$Vk,83:5,84:$Vl,86:2,87:$Vm,88:1},{1:[3]},{1:[2,119]},{1:[2,115]},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vh,39:4,40:$Vi,46:$Vj,47:$Vk,83:5,84:$Vl,86:31,87:$Vm},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vh,39:4,40:$Vi,46:$Vj,47:$Vk,83:5,84:$Vl,86:32,87:$Vm},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vh,39:4,40:$Vi,46:$Vj,47:$Vk,83:5,84:$Vl,86:33,87:$Vm},{36:[1,34]},{8:$V2,13:$V4,16:$Vn,19:35},{4:$Vo,7:$Vp,8:$Vq,9:37,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:55,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{16:[1,56]},o($VD,$VE,{5:57,37:$VF}),{5:59,8:$VE,37:$VF},{5:60,13:$VE,37:$VF},{16:[1,61]},{10:[1,63],18:[1,62]},o($VG,[2,102],{8:$VH,20:[1,64],21:[1,65],22:[1,66],23:[1,67],24:[1,68],58:$VI}),{8:$V2,13:$V4,16:$Vn,19:71},{8:$V2,13:$V4,16:$Vn,19:72},o([8,10,18,20,21,22,23,24,58],$VJ,{13:[1,73]}),{36:[2,15]},{36:[2,16]},{36:[2,17]},{4:$Vo,6:74,7:$Vp,8:$Vq,9:75,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,36:[2,18],51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{16:$VK,30:76},{13:[1,78]},{33:79,34:$VL,36:$VM},{36:[2,23]},{16:[1,81]},{16:[1,82]},{1:[2,116]},{1:[2,117]},{1:[2,118]},o($VN,[2,28]),{8:$VH,41:[1,83],58:$VI},o([8,10,18,36,41,58],$VJ),{23:$VO,24:$VP,37:$VQ,38:$VR,42:[1,84],58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($V81,[2,55]),o($V81,[2,56],{8:[1,107]}),{4:$Vo,7:$Vp,8:$Vq,9:108,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:109,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:110,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:111,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:112,12:$Vr,13:$Vs,16:[1,113],23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},o($VD,$VE,{5:114,37:$VF}),{5:115,13:$VE,37:$VF},{5:116,8:$VE,37:$VF},{4:$Vo,7:$Vp,8:$Vq,9:118,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC,78:117},o($V81,[2,42]),o($V81,[2,43]),o($V81,[2,44]),o($V91,$Va1,{13:$Vb1}),o($V81,[2,47]),o($V81,[2,48]),{23:$VO,24:$VP,37:$VQ,38:$VR,42:[1,120],58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{13:[1,122],85:121},{4:$Vo,6:123,7:$Vp,8:$Vq,9:75,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{16:[1,124]},{8:[1,125]},{13:[1,126]},{36:[2,4]},{4:$Vo,7:$Vp,8:$Vq,9:127,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{8:$V2,13:$V4,16:$Vn,19:128},{4:$Vo,7:$Vp,8:$Vq,9:129,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:130,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:131,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{36:[2,9]},{36:[2,11]},{16:[1,132]},{4:$Vo,7:$Vp,8:$Vq,9:133,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{8:$VH,36:[2,10],58:$VI},{8:$VH,36:[2,12],58:$VI},{4:$Vo,6:135,7:$Vp,8:$Vq,9:75,12:$Vr,13:$Vs,14:[1,134],16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{10:$Vc1,36:[2,19]},o($Vd1,[2,40],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71}),{36:[2,20]},o($Ve1,[2,113],{10:[1,137]}),{4:$Vo,7:$Vp,8:$Vq,9:138,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{34:[1,139]},{33:140,34:$VL,36:$VM},{10:[1,141]},{10:[1,142]},{4:$Vo,7:$Vp,8:$Vq,9:143,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,44:[1,144],51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{3:146,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vf1,43:145,81:147},{4:$Vo,7:$Vp,8:$Vq,9:149,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:150,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:151,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:152,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:153,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:154,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:155,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:156,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:157,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:158,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:159,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:160,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:161,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:162,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:163,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},o($V81,[2,73]),o($V81,[2,75]),{4:$Vo,7:$Vp,8:$Vq,9:164,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:165,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:166,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:167,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{16:[1,168]},{4:$Vo,7:$Vp,8:$Vq,9:169,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,42:$Vg1,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,59:170,65:$VB,77:$VC},o($Vh1,[2,65],{23:$VO,24:$VP,58:$VS,66:$VZ,67:$V_,68:$V$,69:$V01,71:$V21,72:$V31}),o($Vi1,[2,74],{58:$VS}),o($Vi1,[2,76],{58:$VS}),o($Vj1,[2,81],{23:$VO,24:$VP,58:$VS}),{14:[1,171],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o([8,14,23,24,37,38,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Va1,{10:[1,172],13:$Vb1}),{4:$Vo,7:$Vp,8:$Vq,9:173,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{13:[1,174]},{8:[1,175]},{11:[1,176]},{10:[1,177],11:[2,87],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{4:$Vo,6:179,7:$Vp,8:$Vq,9:75,12:$Vr,13:$Vs,14:[1,178],16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{3:146,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vf1,43:180,81:147},{42:[1,181]},{14:[1,182],16:$VK,30:183},{10:$Vc1,36:[2,1]},{38:[1,184]},{4:$Vo,7:$Vp,8:$Vq,9:185,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:186,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{23:$VO,24:$VP,36:[2,5],37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($VG,[2,103],{8:$VH,58:$VI}),{23:$VO,24:$VP,36:[2,6],37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{23:$VO,24:$VP,36:[2,7],37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{23:$VO,24:$VP,36:[2,8],37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($Vk1,[2,99]),{10:[1,188],11:[1,187],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{36:[2,13]},{10:$Vc1,14:[1,189]},{4:$Vo,7:$Vp,8:$Vq,9:190,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{16:$VK,30:191},{14:[1,192],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{36:[2,22]},{34:[2,25]},{16:[1,193]},{16:[1,194]},{23:$VO,24:$VP,37:$VQ,38:$VR,42:[1,195],58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{13:[1,196]},{36:[1,197]},{36:[2,104]},{36:[2,105]},{32:[1,198]},o($Vl1,[2,57],{23:$VO,24:$VP,58:$VS,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31}),o($Vm1,[2,58],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31}),o($Vm1,[2,59],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31}),o($Vl1,[2,60],{23:$VO,24:$VP,58:$VS,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31}),o($Vl1,[2,61],{23:$VO,24:$VP,58:$VS,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31}),o($Vl1,[2,62],{23:$VO,24:$VP,58:$VS,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31}),o($Vh1,[2,63],{23:$VO,24:$VP,58:$VS,66:$VZ,67:$V_,68:$V$,69:$V01,71:$V21,72:$V31}),o($Vh1,[2,64],{23:$VO,24:$VP,58:$VS,66:$VZ,67:$V_,68:$V$,69:$V01,71:$V21,72:$V31}),o($Vn1,[2,66],{23:$VO,24:$VP,58:$VS,69:$V01,72:$V31}),o($Vn1,[2,67],{23:$VO,24:$VP,58:$VS,69:$V01,72:$V31}),o($Vn1,[2,68],{23:$VO,24:$VP,58:$VS,69:$V01,72:$V31}),o($Vj1,[2,69],{23:$VO,24:$VP,58:$VS}),o($Vh1,[2,70],{23:$VO,24:$VP,58:$VS,66:$VZ,67:$V_,68:$V$,69:$V01,71:$V21,72:$V31}),o($Vn1,[2,71],{23:$VO,24:$VP,58:$VS,69:$V01,72:$V31}),o($Vj1,[2,72],{23:$VO,24:$VP,58:$VS}),{23:$VO,24:$VP,37:$VQ,38:$VR,42:[1,199],58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o([10,11,14,36,42,73,74,75,76],[2,78],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31}),o([10,11,14,36,42,73,75],[2,79],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,74:$V51,76:$V71}),o([10,11,14,36,42,73,75,76],[2,80],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,74:$V51}),o($V91,[2,51]),{10:[1,201],11:[1,200],23:$VO,24:$VP,37:$VQ,38:$VR,42:$Vo1,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{42:[1,202]},o($V81,[2,82]),{16:[1,203]},o($Vp1,[2,83],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71}),{4:$Vo,7:$Vp,8:$Vq,9:204,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:205,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},o($V81,[2,86]),{4:$Vo,7:$Vp,8:$Vq,9:207,11:[2,89],12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC,79:206},o($V81,[2,45]),{10:$Vc1,14:[1,208]},{36:[1,209]},{36:$Vf1,81:210},{42:[2,111]},{14:[1,211]},o($VD,[2,27]),{10:[1,212],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{10:[1,213],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($Vk1,[2,100]),{4:$Vo,7:$Vp,8:$Vq,9:214,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{36:[2,14]},o($Vd1,[2,41],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71}),o($Ve1,[2,114]),{36:[2,21]},{14:[1,215]},{11:[1,216]},{3:146,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vf1,43:217,81:147},{4:$Vo,7:$Vp,8:$Vq,9:218,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},o($VN,[2,32]),{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,34:$Vq1,35:$Vg,36:$Vr1,39:221,40:$Vi,46:$Vj,47:$Vk,82:219},{4:$Vo,7:$Vp,8:$Vq,9:222,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},o($V91,[2,52]),{4:$Vo,7:$Vp,8:$Vq,9:223,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:225,11:$Vg1,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,59:224,65:$VB,77:$VC},{14:[1,226]},{10:[1,227],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{10:[1,228],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{11:[2,88]},{10:[1,229],11:[2,90],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($V81,[2,46]),o($VN,[2,33],{48:230,49:$Vs1,50:$Vt1}),{36:[1,233]},{42:[2,112]},{4:$Vo,7:$Vp,8:$Vq,9:234,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:235,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{11:[1,236],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($Vk1,[2,97]),o($Vk1,[2,98]),{36:[1,237]},{10:[1,238],14:[1,239],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{34:[1,240]},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,34:$Vq1,35:$Vg,36:$Vr1,39:221,40:$Vi,46:$Vj,47:$Vk,82:241},{3:7,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,34:$Vq1,35:$Vg,36:$Vr1,39:221,40:$Vi,46:$Vj,47:$Vk,82:242},o($Vp1,[2,77],{23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71}),{11:[1,243],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{11:[1,244]},{11:$Vo1,23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($V81,[2,49]),{4:$Vo,7:$Vp,8:$Vq,9:245,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,7:$Vp,8:$Vq,9:246,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{4:$Vo,6:248,7:$Vp,8:$Vq,9:75,11:[2,92],12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC,80:247},o($VN,[2,34]),{4:$Vo,7:$Vp,8:$Vq,9:249,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{42:[1,250]},o([4,7,8,12,13,15,16,23,24,25,26,27,28,29,31,32,35,36,40,46,47,84,87],[2,110]),{11:[1,251],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{14:[1,252],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($Vk1,[2,101]),o($VN,[2,29]),{4:$Vo,7:$Vp,8:$Vq,9:253,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{42:[1,254]},{36:[2,106]},{34:[2,108]},{34:[2,109]},o($V91,[2,53]),o($V91,[2,54]),{14:[1,255],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{11:[1,256],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{11:[2,91]},{10:$Vc1,11:[2,93]},{23:$VO,24:$VP,37:$VQ,38:$VR,42:[1,257],58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{3:146,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vf1,43:258,81:147},{36:[2,2]},{36:[2,3]},{10:[1,260],14:[2,39],23:$VO,24:$VP,37:$VQ,38:$VR,45:259,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},{3:146,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vf1,43:261,81:147},o($V81,[2,84]),o($V81,[2,85]),{3:146,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vf1,43:262,81:147},{36:[1,263]},{14:[1,264]},{4:$Vo,7:$Vp,8:$Vq,9:265,12:$Vr,13:$Vs,16:$Vt,23:$Vu,24:$Vv,51:38,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:39,65:$VB,77:$VC},{36:[1,266]},{36:[1,267]},o($VN,[2,37]),{42:[1,268]},{14:[2,38],23:$VO,24:$VP,37:$VQ,38:$VR,58:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,71:$V21,72:$V31,73:$V41,74:$V51,75:$V61,76:$V71},o($VN,[2,31]),o($VN,[2,35],{48:269,49:$Vs1,50:$Vt1}),{3:146,4:$V0,7:$V1,8:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:16,19:17,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,31:$Ve,32:$Vf,35:$Vg,36:$Vf1,43:270,81:147},o($VN,[2,36]),{36:[1,271]},o($VN,[2,30])],
defaultActions: {2:[2,119],3:[2,115],21:[2,15],22:[2,16],23:[2,17],28:[2,23],31:[2,116],32:[2,117],33:[2,118],61:[2,4],67:[2,9],68:[2,11],76:[2,20],134:[2,13],139:[2,22],140:[2,25],146:[2,104],147:[2,105],182:[2,111],189:[2,14],192:[2,21],206:[2,88],211:[2,112],240:[2,106],241:[2,108],242:[2,109],247:[2,91],251:[2,2],252:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


// © C. Le Gal 2017-2023
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore */
break;
case 1:/* Ignore */
break;
case 2:return ";"
break;
case 3:return "BEGIN";
break;
case 4:return "END";
break;
case 5:return ";"
break;
case 6:return 53
break;
case 7:return 52
break;
case 8:this.begin("string"); yy._clg_stringBuf="";
break;
case 9:this.popState(); yy_.yytext=yy._clg_stringBuf; return "STRING";
break;
case 10:yy._clg_stringBuf += yy_.yytext;
break;
case 11:yy._clg_stringBuf += "\n";
break;
case 12:yy._clg_stringBuf += yy_.yytext.slice(1);
break;
case 13:this.begin("stringq"); yy._clg_stringBuf="";
break;
case 14:this.popState(); yy_.yytext=yy._clg_stringBuf; return "STRING";
break;
case 15:yy._clg_stringBuf += yy_.yytext;
break;
case 16:yy._clg_stringBuf += "\n";
break;
case 17:yy._clg_stringBuf += yy_.yytext.slice(1);
break;
case 18:return "+="
break;
case 19:return "*="
break;
case 20:return "++"
break;
case 21:return "--"
break;
case 22:return "=="
break;
case 23:return "-="
break;
case 24:return "**"
break;
case 25:return "!="
break;
case 26:return "<="
break;
case 27:return ">="
break;
case 28:return "&&"
break;
case 29:return "&&"
break;
case 30:return "||"
break;
case 31:return "||"
break;
case 32:return "xor"
break;
case 33:return "xor"
break;
case 34:return ".+"
break;
case 35:return ".^"
break;
case 36:return "**"
break;
case 37:return ".*"
break;
case 38:return ".^"
break;
case 39:return "[]"
break;
case 40:return "{}"
break;
case 41:return "="
break;
case 42:return "["
break;
case 43:return "]"
break;
case 44:return ","
break;
case 45:return "("
break;
case 46:return ")"
break;
case 47:return ":"
break;
case 48:return "."
break;
case 49:return "+"
break;
case 50:return "<"
break;
case 51:return ">"
break;
case 52:return "-"
break;
case 53:return "*"
break;
case 54:return "%"
break;
case 55:return "/"
break;
case 56:return "?"
break;
case 57:return "!"
break;
case 58:return "$"
break;
case 59:return "Sommet"
break;
case 60:return "Arete"
break;
case 61:return "Graphe"
break;
case 62:return "Arc"
break;
case 63:return "def"
break;
case 64:return "for"
break;
case 65:return "while"
break;
case 66:return "if"
break;
case 67:return "else"
break;
case 68:return "elif"
break;
case 69:return "continue"
break;
case 70:return "break"
break;
case 71:return "pass"
break;
case 72:return "in"
break;
case 73:return "global"
break;
case 74:return "return"
break;
case 75:return "range"
break;
case 76:return "exit"
break;
case 77:return "ID"
break;
case 78:return 87
break;
case 79:return 'INVALID'
break;
}
},
rules: [/^(?:#.*)/,/^(?: +)/,/^(?:[\n])/,/^(?:§\{)/,/^(?:§\})/,/^(?:§;)/,/^(?:[0-9]+(\.[0-9]+)?((E|e)(-)?[0-9]+)?(d|D)\b)/,/^(?:[0-9]+(\.[0-9]+)?((E|e)-?[0-9]+)?\b)/,/^(?:["])/,/^(?:["])/,/^(?:[^"\\\n])/,/^(?:\\n)/,/^(?:\\[^\n])/,/^(?:['])/,/^(?:['])/,/^(?:[^'\\\n])/,/^(?:\\n)/,/^(?:\\[^\n])/,/^(?:\+=)/,/^(?:\*=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:-=)/,/^(?:\^)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:&&)/,/^(?:and\b)/,/^(?:\|\|)/,/^(?:or\b)/,/^(?:xor\b)/,/^(?:\^\^)/,/^(?:\.\+)/,/^(?:\.\*\*)/,/^(?:\*\*)/,/^(?:\.\*)/,/^(?:\.\^)/,/^(?:\[\])/,/^(?:\{\})/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:\.)/,/^(?:\+)/,/^(?:<)/,/^(?:>)/,/^(?:-)/,/^(?:\*)/,/^(?:%)/,/^(?:\/)/,/^(?:\?)/,/^(?:!)/,/^(?:\$.*)/,/^(?:Sommet\b)/,/^(?:Arete\b)/,/^(?:Graphe\b)/,/^(?:Arc\b)/,/^(?:def\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:pass\b)/,/^(?:in\b)/,/^(?:global\b)/,/^(?:return\b)/,/^(?:range\b)/,/^(?:exit\b)/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"stringq":{"rules":[14,15,16,17],"inclusive":false},"string":{"rules":[9,10,11,12],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,13,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grlang;
exports.Parser = grlang.Parser;
exports.parse = function () { return grlang.parse.apply(grlang, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}export default grlang;
